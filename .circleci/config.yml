version: 2

jobs:
    build:
        # The local circleci binary does not support relative directories.
        # They plan to remove this limitation in the future.
        # Ref: https://circleci.com/docs/2.0/local-jobs/#relative-path-for-working_directory
        working_directory: "/workspace/src/flywheel.io/sdk"

        docker:
            - image: buildpack-deps:zesty
              environment:
                # Enable the installation and use of junit XML output
                MakeGenerateJunit: "1"
                # These make local builds faster by virtue of the source directory mount.
                # Would be better to get caching in the local build environment and remove this section.
                # Ref: https://discuss.circleci.com/t/caching-in-the-local-2-0-environment/13542
                GIMME_ENV_PREFIX: "./.gimme/envs"
                GIMME_VERSION_PREFIX: "./.gimme/versions"

            - image: mongo:3.4
              command: [--smallfiles]

            - image: scitran/core:latest
              # The scitran image really shouldn't need a pip install, but it seems that sometimes the image is out of date.
              command: |
                bash -c 'set -ex; env; rm -rf code/api;
                git clone https://github.com/scitran/core code/api; cd code/api;
                git checkout "${CIRCLE_BRANCH}" || true; cd /var/scitran;
                time pip install -r /var/scitran/code/api/requirements.txt;
                python /var/scitran/code/api/bin/database.py upgrade_schema;
                /var/scitran/uwsgi-entrypoint.sh uwsgi --ini /var/scitran/config/uwsgi-config.ini --socket "[::]:9000" --processes 4 --threads 2;'

            - image: nginx:stable
              environment:
                # This config is representative of Flywheel systems in production as of 2017-05-22
                NGINX_CONF: |
                  server {
                    listen 8080;
                    location /api {
                      uwsgi_pass localhost:9000;
                      uwsgi_buffering off;
                      uwsgi_buffers 8 1M;
                      uwsgi_request_buffering off;
                      include uwsgi_params;
                      proxy_set_header Host $host;
                      client_max_body_size 50g;
                      add_header Access-Control-Allow-Origin $http_origin always;
                      if ($request_method = OPTIONS) {
                        add_header Access-Control-Allow-Origin $http_origin always;
                        add_header Access-Control-Allow-Methods 'GET, HEAD, POST, PUT, DELETE, OPTIONS';
                        add_header Access-Control-Allow-Headers 'Authorization, Content-Type, Content-MD5';
                        add_header Access-Control-Max-Age 151200;
                        return 204;
                      }
                    }
                  }
              command: |
                bash -c '
                  ln -sf /dev/stdout /var/log/nginx/access.log;
                  ln -sf /dev/stderr /var/log/nginx/error.log;
                  echo "$NGINX_CONF" > /etc/nginx/conf.d/proxy.conf;
                  cat /etc/nginx/conf.d/proxy.conf;

                  # Nginx is sometimes irritable about connecting to an upstream if the upstream does not work on the first request.
                  # To prevent transient delays, hold off on launching nginx until the upstream port is open.
                  # This loops forever, and eventually is killed off when prepare-environment gives up.

                  while ! timeout 1 bash -c "echo > /dev/tcp/localhost/9000"; do sleep 0.5; done;

                  nginx -g "daemon off;"'

        steps:
            - checkout

            - restore_cache:
                key: sdk-golang-1-{{ checksum "make.sh"}}-{{ checksum "glide.lock" }}

            # This is a hack to prevent downloading glide / Junit on every file change when iterating locally.
            # Users can keep a copy of the glide binary in the repo folder and have that be used instead.
            # As before, it would be better to get caching in the local build environment...
            - run:
                name: "[Hack] Check for Local Glide / Junit"
                command: copy() { test -f ./.circleci/$1 -a -x ./.circleci/$1 && cp ./.circleci/$1 /workspace/bin/$1 || true; }; mkdir -p /workspace/bin; copy glide; copy go-junit-report

            - run:
                name: Install Dependencies
                command: ./make.sh glide install

            - run:
                name: Compile Standard Library
                command: ./make.sh prepareCrossBuild

            - save_cache:
                key: sdk-golang-1-{{ checksum "make.sh"}}-{{ checksum "glide.lock" }}
                paths:
                    - "./.gimme"
                    - "./.glide"
                    - "/workspace/bin"

            - run:
                name: Compile
                command: ./make.sh cross

            - run:
                name: Check formatting
                command: ./make.sh formatCheck

            - run:
                name: Wait for API
                command: ./make.sh go run .circleci/prepare-environment.go

            - run:
                name: Integration Tests
                command: ./make.sh test
                # command: ./make.sh test -run TestSuite/TestGetConfig
                environment:
                  SdkTestMode:     "integration"
                  SdkTestKey:      "localhost:8080:insecure-key"
                  SdkTestProtocol: "http"

            - run:
                name: Triage environment
                command: ./make.sh go run .circleci/triage-environment.go
                when: on_fail

            - run:
                name: Build SDK
                command: ./bridge/make.sh
            - run:
                name: Test drive python frontend
                command: python test-drive.py
                working_directory: /workspace/src/flywheel.io/sdk/bridge/dist/python
                environment:
                  SdkTestKey: "localhost:8080:insecure-key,InsecureUsePlaintext"
                  PYTHONDONTWRITEBYTECODE: "really"

            - run:
                name: Build Wheel
                command: |
                  apt-get update; apt-get -y install python-wheel python3-wheel
                  python2 setup.py bdist_wheel --plat-name linux_x86_64 --dist-dir .
                  python3 setup.py bdist_wheel --plat-name linux_x86_64 --dist-dir .
                working_directory: /workspace/src/flywheel.io/sdk/bridge/dist/python

            - run:
                name: Cleanup
                command: cd /workspace/bin; rm -f glide sdk go-junit-report
                when: always

            # CircleCI wants their 'store_test_results' path to be a folder; oblige them!
            - run:
                name: Test fiddling
                command: test -f .report.xml && ( cat .report.xml; mkdir -p circle-tests; mv .report.xml circle-tests/ ) || true
                when: always

            - store_test_results:
                path: circle-tests

            - store_artifacts:
                path: "/workspace/bin"
                destination: build

            - store_artifacts:
                path: "/workspace/src/flywheel.io/sdk/bridge/dist"
                destination: bridge

            - store_artifacts:
                path: "/workspace/src/flywheel.io/sdk/coverage.html"
                destination: coverage
